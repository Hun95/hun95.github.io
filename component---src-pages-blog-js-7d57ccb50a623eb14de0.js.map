{"version":3,"sources":["webpack:///./src/components/Post/style.js","webpack:///./src/components/Category/style.js","webpack:///./src/components/Category/index.js","webpack:///./src/hooks/useCategory.js","webpack:///./src/pages/blog.js"],"names":["styled","div","section","h2","p","Link","Button","button","Wrap","FlexBox","Category","edges","click","center","map","category","index","key","onClick","useCategory","initValue","tempItems","newtagsArray","categories","useState","node","setNode","items","frontmatter","Set","Array","from","handleItems","filter","Blog","dataForm","useStaticQuery","allMdx","Layout","title","description","lang"],"mappings":"+KAG2BA,IAAOC,IAAV,qEAAGD,CAAH,kLAQJA,IAAOE,QAAV,8DAAGF,CAAH,0KAYQA,IAAOG,GAAV,mEAAGH,CAAH,wDAQMA,IAAOI,EAAV,sEAAGJ,CAAH,wDAQDA,IAAOI,EAAV,kEAAGJ,CAAH,MAIFA,YAAOK,QAAV,6DAAGL,CAAH,qHAcOA,IAAOC,IAAV,iEAAGD,CAAH,M,WCvDdM,EAASN,IAAOO,OAAV,oEAAGP,CAAH,sLAgBNQ,EAAOR,IAAOC,IAAV,kEAAGD,CAAH,sKASNS,KCTWC,EAhBE,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACzB,OACE,oCACE,kBAACJ,EAAD,CAAMK,QAAM,GACTF,EAAMG,KAAI,SAACC,EAAUC,GACpB,OACE,kBAACV,EAAD,CAAQW,IAAKD,EAAOE,QAAS,kBAAMN,EAAMG,KACtCA,S,YCoBAI,EAlBK,SAAAC,GAAc,IAT5BC,EAGAC,EACAC,EAK2B,EACPC,mBAASJ,GAA1BK,EADwB,KAClBC,EADkB,OAECF,oBAX5BH,EAW6CI,EAX3BX,KAAI,SAAAa,GACxB,OAAOA,EAAMF,KAAKG,YAAYb,YAE5BO,EAAe,IAAIO,IAAIR,GACvBE,EAAaO,MAAMC,KAAKT,GAC5BC,EAAU,CAAI,OAAJ,mBAAcA,MAMjBR,EAFwB,UAgB/B,MAAO,CAAEiB,YAZW,SAAAjB,GAClB,IAAIM,EAAS,YAAOD,GAEpB,GAAiB,QAAbL,EACFW,EAAQL,OACH,CACL,IAAIM,EAAQN,EAAUY,QACpB,qBAAGR,KAAgBG,YAAYb,WAAaA,KAE9CW,EAAQC,KAGUZ,WAAUU,SCgBnBS,UApCF,WACX,IAuBMC,EAvBOC,yBAAe,cAuBNC,OAAO1B,MAxBZ,EAyBuBQ,EAAYgB,GAA5CpB,EAzBS,EAyBTA,SAAgBiB,GAzBP,EAyBCP,KAzBD,EAyBOO,aACxB,OACE,kBAACM,EAAA,EAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,OAAOC,YAAY,mBAAmBC,KAAK,OACtD,kBAAC,EAAD,CAAU9B,MAAOI,EAAUH,MAAOoB,IAFpC","file":"component---src-pages-blog-js-7d57ccb50a623eb14de0.js","sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'gatsby';\n\nexport const CardWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(358px, 1fr));\n\n  @media only screen and (max-width: 768px) {\n    grid-template-columns: repeat(auto-fill, minmax(330px, 1fr));\n  } ;\n`;\nexport const Card = styled.section`\n  background: #ffffff;\n\n  border-radius: 0 0 5px 5px;\n  box-shadow: 0 20px 10px -15px rgba(197, 192, 249, 0.2);\n\n  &:hover {\n    transition: all 0.3s ease-in-out;\n    transform: translateY(-5px);\n  }\n`;\n\nexport const CardTitle = styled.h2`\n  line-height: 2rem;\n\n  overflow: hidden;\n\n  font-weight: bold;\n`;\n\nexport const CardSubTitle = styled.p`\n  line-height: 2rem;\n\n  overflow: hidden;\n\n  font-weight: bold;\n`;\n\nexport const CardDate = styled.p``;\n\n/* Tag */\n\nexport const Tag = styled(Link)`\n  background-color: #ffd42a;\n\n  color: black;\n  font-size: 10px;\n\n  border: none;\n  border-radius: 2rem;\n\n  &:hover {\n    background: #fff5cc;\n  }\n`;\n\nexport const TagWrap = styled.div``;\n","import styled from 'styled-components';\nimport { FlexBox } from '../Global/Styled';\nconst Button = styled.button`\n  background-color: #ffd42a;\n  color: black;\n  font-size: 15px;\n  margin-right: 1rem;\n  border: none;\n  border-radius: 2rem;\n  padding: 1% 1%;\n\n  text-align: center;\n  min-width: 4rem;\n\n  &:hover {\n    background: #fff5cc;\n  }\n`;\nconst Wrap = styled.div`\n  margin-bottom: 2rem;\n  background: #fafafa;\n\n  padding: 1rem;\n\n  border: 2px solid #e6e6e6;\n  border-radius: 1rem;\n  overflow-x: auto;\n  ${FlexBox}\n\n  &::-webkit-scrollbar {\n    display: none !important;\n  }\n`;\n\nexport { Button, Wrap };\n","import React from 'react';\nimport { Wrap, Button } from './style';\nconst Category = ({ edges, click }) => {\n  return (\n    <>\n      <Wrap center>\n        {edges.map((category, index) => {\n          return (\n            <Button key={index} onClick={() => click(category)}>\n              {category}\n            </Button>\n          );\n        })}\n      </Wrap>\n    </>\n  );\n};\n\nexport default Category;\n","import { useState } from 'react';\nconst getTags = items => {\n  let tempItems = items.map(items => {\n    return items.node.frontmatter.category;\n  });\n  let newtagsArray = new Set(tempItems);\n  let categories = Array.from(newtagsArray);\n  categories = ['All', ...categories];\n  return categories;\n};\n\nconst useCategory = initValue => {\n  const [node, setNode] = useState(initValue);\n  const [category, setCategory] = useState(getTags(node));\n\n  const handleItems = category => {\n    let tempItems = [...initValue];\n\n    if (category === 'All') {\n      setNode(tempItems);\n    } else {\n      let items = tempItems.filter(\n        ({ node }) => node.frontmatter.category === category\n      );\n      setNode(items);\n    }\n  };\n  return { handleItems, category, node };\n};\nexport default useCategory;\n","import React from 'react';\nimport Layout from '../components/Layout/';\nimport SEO from '../components/Seo';\nimport Post from '../components/Post/';\nimport Category from '../components/Category';\nimport useCategory from '../hooks/useCategory';\nimport { useStaticQuery, graphql } from 'gatsby';\nconst Blog = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n        edges {\n          node {\n            id\n            body\n            frontmatter {\n              title\n              subtitle\n              date(formatString: \"MMM Do YYYY\")\n              category\n              tags\n            }\n            fields {\n              slug\n            }\n            excerpt\n          }\n        }\n      }\n    }\n  `);\n  const dataForm = data.allMdx.edges;\n  const { category, node, handleItems } = useCategory(dataForm);\n  return (\n    <Layout>\n      <SEO title='Blog' description='welocome to Blog' lang='ko' />\n      <Category edges={category} click={handleItems} />\n      준비중..\n      {/* <Post edges={node} /> */}\n    </Layout>\n  );\n};\n\nexport default Blog;\n"],"sourceRoot":""}